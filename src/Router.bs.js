// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("rescript/lib/js/belt_List.js");
var Route$BApi = require("./Route.bs.js");
var Method$BApi = require("./Method.bs.js");
var Core__Option = require("@rescript/core/src/Core__Option.bs.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

function resolve(route, method, middleware) {
  var invalidMethodError = function (allowed) {
    return {
            status: 405,
            payload: {
              err: "method-not-allowed",
              msg: "Method is not allowed",
              details: JSON.stringify({
                    accepted_methods: Method$BApi.toString(allowed)
                  })
            }
          };
  };
  var getHandler = function (route) {
    var config = Belt_MapString.getExn(middleware, Route$BApi.toString(route));
    if (method === config.method) {
      return {
              TAG: /* Ok */0,
              _0: config.handler
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: invalidMethodError(config.method)
            };
    }
  };
  return Core__Option.mapWithDefault(Route$BApi.resolve(route, Belt_List.map(Belt_List.fromArray(Belt_MapString.keysToArray(middleware)), Route$BApi.fromString)), {
              TAG: /* Error */1,
              _0: {
                status: 404,
                payload: {
                  err: "endpoint-not-found",
                  msg: "The endpoint requested was not found",
                  details: "{}"
                }
              }
            }, getHandler);
}

exports.resolve = resolve;
/* No side effect */
