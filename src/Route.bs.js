// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("rescript/lib/js/belt_List.js");

function resolve(route, allRoutes) {
  var split = Belt_List.keep(Belt_List.fromArray(route.split("/")), (function (a) {
          return a !== "";
        }));
  var isMatch = function (t) {
    var isSameLength = Belt_List.length(split) === Belt_List.length(t);
    var couldBeMatch = function (a, b) {
      if (a.TAG === /* Variable */0) {
        return true;
      } else {
        return a._0 === b;
      }
    };
    if (isSameLength) {
      return Belt_List.reduce(Belt_List.zipBy(t, split, couldBeMatch), true, (function (acc, curr) {
                    if (acc) {
                      return curr;
                    } else {
                      return false;
                    }
                  }));
    } else {
      return false;
    }
  };
  return Belt_List.get(Belt_List.keep(allRoutes, isMatch), 0);
}

function isResolveable(routes) {
  return true;
}

function toString(t) {
  return Belt_List.reduce(t, "", (function (acc, curr) {
                var tmp;
                tmp = curr.TAG === /* Variable */0 ? ":" + curr._0 + "" : curr._0;
                return acc + "/" + tmp;
              }));
}

function fromString(s) {
  return Belt_List.map(Belt_List.keep(Belt_List.fromArray(s.split("/")), (function (a) {
                    return a !== "";
                  })), (function (elem) {
                var startsWithColon = elem.startsWith(":");
                if (startsWithColon) {
                  return {
                          TAG: /* Variable */0,
                          _0: elem.substring(1)
                        };
                } else {
                  return {
                          TAG: /* Constant */1,
                          _0: elem
                        };
                }
              }));
}

exports.resolve = resolve;
exports.isResolveable = isResolveable;
exports.toString = toString;
exports.fromString = fromString;
/* No side effect */
