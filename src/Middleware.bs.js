// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Route$BApi = require("./Route.bs.js");
var Method$BApi = require("./Method.bs.js");
var Core__Option = require("@rescript/core/src/Core__Option.bs.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

function make(param) {
  
}

function route(t, route$1, method, handler) {
  return Belt_MapString.set(t, Route$BApi.toString(route$1), {
              route: route$1,
              method: method,
              handler: handler
            });
}

function resolve(t, strRoute, method) {
  var invalidMethodError = function (allowed) {
    return {
            status: 405,
            payload: {
              err: "method-not-allowed",
              msg: "Method is not allowed",
              details: JSON.stringify({
                    accepted_methods: Method$BApi.toString(allowed)
                  })
            }
          };
  };
  return Core__Option.mapWithDefault(Route$BApi.resolve(strRoute, Belt_List.map(Belt_List.fromArray(Belt_MapString.keysToArray(t)), Route$BApi.fromString)), {
              TAG: /* Error */1,
              _0: {
                status: 404,
                payload: {
                  err: "endpoint-not-found",
                  msg: "The endpoint requested was not found",
                  details: "{}"
                }
              }
            }, (function (route) {
                var config = Belt_MapString.getExn(t, Route$BApi.toString(route));
                if (method === config.method) {
                  return {
                          TAG: /* Ok */0,
                          _0: (function (param) {
                              return Curry._1(config.handler, Route$BApi.mapVariables(route, strRoute));
                            })
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: invalidMethodError(config.method)
                        };
                }
              }));
}

exports.make = make;
exports.route = route;
exports.resolve = resolve;
/* No side effect */
