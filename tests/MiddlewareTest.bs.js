// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Tests$BApi = require("./Tests.bs.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");
var Middleware$BApi = require("../src/Middleware.bs.js");

function resultIsOkAndMatches(result, expected) {
  if (result.TAG === /* Ok */0) {
    var f = result._0;
    var res = Curry._1(f, undefined);
    if (res.TAG === /* Ok */0) {
      return Caml_obj.equal(res._0, expected);
    } else {
      return false;
    }
  } else {
    return false;
  }
}

function resultIsErrorAndMatches(result, expected) {
  if (result.TAG === /* Ok */0) {
    return false;
  } else {
    return Caml_obj.equal(result._0, expected);
  }
}

function testSimple(param) {
  var middleware = Middleware$BApi.route(Middleware$BApi.make(undefined), {
        hd: {
          TAG: /* Constant */1,
          _0: "test"
        },
        tl: /* [] */0
      }, /* GET */0, (function (params) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    status: 200,
                    payload: "test"
                  }
                };
        }));
  var f = Middleware$BApi.resolve(middleware, "/test", /* GET */0);
  Tests$BApi.run([
        [
          "MiddlewareTest.res",
          32,
          15,
          44
        ],
        "testing middleware (simple)"
      ], f, resultIsOkAndMatches, {
        status: 200,
        payload: "test"
      });
}

function testParams(param) {
  var middleware = Middleware$BApi.route(Middleware$BApi.make(undefined), {
        hd: {
          TAG: /* Variable */0,
          _0: "var1"
        },
        tl: {
          hd: {
            TAG: /* Variable */0,
            _0: "var2"
          },
          tl: /* [] */0
        }
      }, /* GET */0, (function (params) {
          var var1 = Belt_MapString.getExn(params, "var1");
          var var2 = Belt_MapString.getExn(params, "var2");
          return {
                  TAG: /* Ok */0,
                  _0: {
                    status: 200,
                    payload: "" + var1 + ":" + var2 + ""
                  }
                };
        }));
  var f = Middleware$BApi.resolve(middleware, "/test1/test2", /* GET */0);
  Tests$BApi.run([
        [
          "MiddlewareTest.res",
          56,
          15,
          44
        ],
        "testing middleware (params)"
      ], f, resultIsOkAndMatches, {
        status: 200,
        payload: "test1:test2"
      });
}

function testMethodNotAllowedError(param) {
  var middleware = Middleware$BApi.route(Middleware$BApi.make(undefined), {
        hd: {
          TAG: /* Constant */1,
          _0: "test"
        },
        tl: /* [] */0
      }, /* GET */0, (function (params) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    status: 200,
                    payload: "test"
                  }
                };
        }));
  var f = Middleware$BApi.resolve(middleware, "/test", /* POST */2);
  Tests$BApi.run([
        [
          "MiddlewareTest.res",
          74,
          15,
          56
        ],
        "testing middleware (method not allowed)"
      ], f, resultIsErrorAndMatches, {
        status: 405,
        payload: {
          err: "method-not-allowed",
          msg: "Method is not allowed",
          details: "{\"accepted_methods\":\"GET\"}"
        }
      });
}

function testRouteNotFoundError(param) {
  var middleware = Middleware$BApi.route(Middleware$BApi.make(undefined), {
        hd: {
          TAG: /* Constant */1,
          _0: "test"
        },
        tl: /* [] */0
      }, /* GET */0, (function (params) {
          return {
                  TAG: /* Ok */0,
                  _0: {
                    status: 200,
                    payload: "test"
                  }
                };
        }));
  var f = Middleware$BApi.resolve(middleware, "/test1", /* GET */0);
  Tests$BApi.run([
        [
          "MiddlewareTest.res",
          99,
          15,
          56
        ],
        "testing middleware (endpoint not found)"
      ], f, resultIsErrorAndMatches, {
        status: 404,
        payload: {
          err: "endpoint-not-found",
          msg: "The endpoint requested was not found",
          details: "{}"
        }
      });
}

function run(param) {
  testSimple(undefined);
  testMethodNotAllowedError(undefined);
  testRouteNotFoundError(undefined);
  testParams(undefined);
}

exports.resultIsOkAndMatches = resultIsOkAndMatches;
exports.resultIsErrorAndMatches = resultIsErrorAndMatches;
exports.testSimple = testSimple;
exports.testParams = testParams;
exports.testMethodNotAllowedError = testMethodNotAllowedError;
exports.testRouteNotFoundError = testRouteNotFoundError;
exports.run = run;
/* Tests-BApi Not a pure module */
