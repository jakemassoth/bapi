// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Route$BApi = require("../src/Route.bs.js");
var Tests$BApi = require("./Tests.bs.js");

function stringEquals(a, b) {
  return a === b;
}

function testToString(param) {
  Tests$BApi.run([
        [
          "RouteTest.res",
          7,
          15,
          39
        ],
        "testing Route.toString"
      ], Route$BApi.toString({
            hd: {
              TAG: /* Variable */0,
              _0: "varOne"
            },
            tl: {
              hd: {
                TAG: /* Constant */1,
                _0: "constantOne"
              },
              tl: /* [] */0
            }
          }), stringEquals, "/:varOne/constantOne");
}

function testResolve1(param) {
  var possibleRoutes = {
    hd: {
      hd: {
        TAG: /* Variable */0,
        _0: "varOne"
      },
      tl: {
        hd: {
          TAG: /* Constant */1,
          _0: "constantOne"
        },
        tl: /* [] */0
      }
    },
    tl: {
      hd: {
        hd: {
          TAG: /* Variable */0,
          _0: "varTwo"
        },
        tl: {
          hd: {
            TAG: /* Constant */1,
            _0: "constantTwo"
          },
          tl: /* [] */0
        }
      },
      tl: /* [] */0
    }
  };
  Tests$BApi.run([
        [
          "RouteTest.res",
          21,
          15,
          38
        ],
        "testing Route.resolve"
      ], Route$BApi.toString(Route$BApi.resolve("/something/constantTwo", possibleRoutes)), stringEquals, "/:varTwo/constantTwo");
  Tests$BApi.run([
        [
          "RouteTest.res",
          27,
          15,
          38
        ],
        "testing Route.resolve"
      ], Route$BApi.toString(Route$BApi.resolve("/something/constantOne", possibleRoutes)), stringEquals, "/:varOne/constantOne");
}

function testResolve2(param) {
  var possibleRoutes = {
    hd: {
      hd: {
        TAG: /* Variable */0,
        _0: "varOne"
      },
      tl: {
        hd: {
          TAG: /* Constant */1,
          _0: "constantOne"
        },
        tl: /* [] */0
      }
    },
    tl: {
      hd: {
        hd: {
          TAG: /* Variable */0,
          _0: "varOne"
        },
        tl: {
          hd: {
            TAG: /* Constant */1,
            _0: "constantOne"
          },
          tl: {
            hd: {
              TAG: /* Variable */0,
              _0: "varTwo"
            },
            tl: /* [] */0
          }
        }
      },
      tl: /* [] */0
    }
  };
  Tests$BApi.run([
        [
          "RouteTest.res",
          41,
          15,
          38
        ],
        "testing Route.resolve"
      ], Route$BApi.toString(Route$BApi.resolve("/something/constantOne/somethingElse", possibleRoutes)), stringEquals, "/:varOne/constantOne/:varTwo");
  Tests$BApi.run([
        [
          "RouteTest.res",
          50,
          15,
          38
        ],
        "testing Route.resolve"
      ], Route$BApi.toString(Route$BApi.resolve("/something/constantOne", possibleRoutes)), stringEquals, "/:varOne/constantOne");
}

function run(param) {
  testToString(undefined);
  testResolve1(undefined);
  testResolve2(undefined);
}

exports.stringEquals = stringEquals;
exports.testToString = testToString;
exports.testResolve1 = testResolve1;
exports.testResolve2 = testResolve2;
exports.run = run;
/* Tests-BApi Not a pure module */
